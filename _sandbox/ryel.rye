; # Rye local binary*
;
; *This is experimental way to work with rye interpreter*
;
; This Rye script looks at local rye.mod and tries to build Rye binary with listed bindings

; for outside of rye source dir
; a=$PWD ; cd ~/go/src/rye ; go build -tags "b_tiny,b_http,b_bleve" -o "$a/ryel" ; cd "$a"


build-ryel: fn { } {
	
	print "___      ____,          .     __"
	print "|__) \ / |__  |     /\  |\ | / _`"
	print "|  \  |  |___ |___ /~~\ | \| \__>"
	print "============================================"
	print "Building local Rye interpreter with modules:"

	open %rye.mod
	|fix-either
	 { print "Create rye.mod file and list modules." " nil " }
	 { .read-all }
	|load
	|map { .to-string .concat* "b_" }
	|join-with " " :modules |print
	
	command: $a=%PWD ; cd ~/go/src/rye ; go build -tags "b_tiny $ + modules + $" -o "%a/ryel" ; cd "%a"$
	command .replace "%" "$" :command
	cmd command
}

install-ryel: fn { } {
  print "Installing Ryel ..."
}

rye .args -> 2 :mode = "build" |if { build-ryel }
if mode = "install" { install-ryel }

; Later when script is executed and it returns a failure of missing known binding it adds it to the list
