; Rye local binary
;
; This Rye script builds a local Rye interpreter with specified modules
; based on the bindings listed in ryel.mod file.
;
; Usage: rye util/ryel.rye [command] [options]

rye .args\raw |load :args
root-ctx: current

print-header: does {
	print "___      ____,          .     __"
	print "|__) \ / |__  |     /\  |\ | / _`"
	print "|  \  |  |___ |___ /~~\ | \| \__>"
	print "===================================="
}

print-help: does {
	print-header
	print "\n# Ryel - Local Rye Interpreter Builder\n"
	print "This tool helps you build and manage a local Rye interpreter with custom modules."
	print "\nCommands:"
	print "  build [tags]      - Build a local Rye interpreter with modules from ryel.mod"
	print "                      Optional tags parameter for additional build tags"
	print "  build\\fyne [tags]  - Build a Fyne package with modules from ryel.mod"
	print "                      Optional tags parameter for additional build tags"
	print "  build\\fyne\\apk [tags] - Build a Fyne package for Android with modules from ryel.mod"
	print "                      Optional tags parameter for additional build tags"
	print "  install           - Install the local Rye interpreter (not yet implemented)"
	print "  help              - Display this help information"
	print "\nExamples:"
	print "  rye . build           # Build with modules from ryel.mod"
	print "  rye . build\\fyne embed_main # Build with embed_main tag"
	print "  rye . build\\fyne\\apk embed_main  # Build Fyne package for Android"
	print "\nModule Configuration:"
	print "  Create a ryel.mod file in your project directory with a list of modules"
	print "  Each module will be prefixed with 'b_' automatically"
	print `  Example ryel.mod content: tiny http bleve`
}

build: fn { tags } {
	print-header
	print "\nBuilding local Rye interpreter with modules:"
	
	open %ryel.mod
	|fix\either
	{ print "Error: ryel.mod file not found." 
	  print `Please create ryel.mod file and list modules in the format: { "tiny" "http" "bleve" }`
	  " nil " }
	{ .read-all }
	|load
	|map { .to-string .concat* "b_" }
	|join\with " " :modules |print

	cp-embed: either tags = "embed_main" { "cp main.rye %RYE_HOME/runner/buildtemp/. ; " } { "" }
	
	var 'command join { cp-embed ` a=%PWD ; cd %RYE_HOME-fyne ; go build -tags "` ++ modules ++ " " ++ tags `" -o "%a/ryel" ; cd "%a"` } ; ` delimiter for string is just temporary ... ' conflicts with lit-words and Rebols { } with blocks so this question is open so far
	command .replace "%" "$" ::command
	; print "Build command: " ++ command
	cmd command
	
	print "\nBuild completed. You can now use ./ryel to run your Rye scripts."
}

build\fyne: fn { tags } {
	print-header
	print "\nBuilding Fyne package for Android with modules:"
	
	open %ryel.mod
	|fix\either
	{ print "Error: ryel.mod file not found." 
	  print `Please create ryel.mod file and list modules in the format: { \"tiny\" \"http\" \"bleve\" }`
	  " nil " }
	{ .read-all }
	|load
	|map { .to-string .concat* "b_" }
	|join\with " " :modules |print

	cp-embed: either tags = "embed_main" { "cp main.rye %RYE_HOME/runner/buildtemp/. ; " } { "" }
	
	var 'command join { cp-embed ` a=%PWD ; cd %RYE_HOME-fyne ; fyne release -icon Icon.png -appVersion 0.0.1  -tags "` ++ modules ++ " " ++ tags `"; cd "%a"` } ; ` delimiter for string is just temporary ... ' conflicts with lit-words and Rebols { } with blocks so this question is open so far
	command .replace "%" "$" ::command
	; print "Build command: " ++ command
	cmd command
	
	print "\nFyne package build completed for Android."
}


build\fyne\fyne: fn { tags } {
	print-header
	print "\nBuilding Fyne package for Android with modules:"
	
	open %ryel.mod
	|fix\either
	{ print "Error: ryel.mod file not found." 
	  print `Please create ryel.mod file and list modules in the format: { \"tiny\" \"http\" \"bleve\" }`
	  " nil " }
	{ .read-all }
	|load
	|map { .to-string .concat* "b_" }
	|join\with " " :modules |print

	cp-embed: either tags = "embed_main" { "cp main.rye %RYE_HOME/runner/buildtemp/. ; " } { "" }
	
	var 'command join { cp-embed ` a=%PWD ; cd %RYE_HOME-fyne ; fyne package -os android -appID com.refaktorlabs.fynetest1 -icon Icon.png -appVersion 0.0.1  -tags "` ++ modules ++ " " ++ tags `"; cd "%a"` } ; ` delimiter for string is just temporary ... ' conflicts with lit-words and Rebols { } with blocks so this question is open so far
	command .replace "%" "$" ::command
	; print "Build command: " ++ command
	cmd command
	
	print "\nFyne package build completed for Android."
}

install-ryel: fn { } {
  print-header
  print "\nInstalling Ryel ..."
  print "This feature is not yet implemented."
  print "Please check back in a future version."
}

; Get command and tags from arguments
first args |fix { "" } :mode
second args |fix { "" } |to-string :tags

probe mode
print "---"

; Process commands
switch mode {
	build     		{ build tags }
	build\fyne     	{ build\fyne tags }
	build\fyne\apk 	{ build\fyne\apk tags }
	install   		{ install-ryel }
	help      		{ print-help }
	_           	{ print-help }  ; Default to help if no command or unknown command
}

; Later when script is executed and it returns a failure of missing known binding it adds it to the list
