

; When programming, our scopes (namespaces, contexts ...) are basically
; key-value stores. They translate names to values.
; Just some idea ... what if scopes could also store relations betwen values?
; If context would also be a graph.
; Would this improve on how we solve some problems, or write some algoritms?
;
; I haven't really explored it yet, below I tried to get sense of how code in
; this case could look like at all.

(person): kind { name: required soc-score: optional 50 integer }

jim: (person) << { name: "Jim" soc-score: 42 }
maya: (person) << { name: "Maya" soc-score: 59 }

jim ~> 'sister-of maya
maya ~> 'brother-of jim
jim ~~ 'friend (person) << { name: "Jane" }

{ 'sister-of 'brother-of } .also-means 'related
{ 'related 'friend } .also-means 'knows

jim .for~ 'related { -> 'name .print }
jim .map~ 'knows { -> 'soc-score } |average |< 50 |if { fail "No ticket for Ya!" }


