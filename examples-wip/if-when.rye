
; helper function
get-message: fn1 { <- { "alert: something urgent!" "nothing important" } }
(a): 0 (b): 1 

; when coding in Rye, I sometimes wanted to test on a value and if test is true
; do something with that value. Yesterday I tried to concretize the idea.

; EXAMPLE: if a message contains text 'alert', print it
msg: get-message (a) 

if msg .contains "alert" { 
  print msg 
}

; written using pipe and op-words
get-message (a) :msg |contains "alert" |if { print msg } 

; I find the need to create temporary variable 'msg' lacking.
; We have a related mechanism 'with', we could create if-with function.
; Remember, in Rye everything (conditionals too) are just functions. 

if-with: fn { val cond blk } { .with cond |if { with val blk } } 

; so our example now becomes 

get-message (a) |if-with { .contains "alert" } { .print }

; maybe, for elegance's sake, if-with would deserve it's own word
when: ?if-with 

get-message (a) |when { .contains "alert" } { .print }
get-message (b) |when { .contains "alert" } { .print } 
 
; This also shows how easy it is, to create new 'control structures' with Rye 
