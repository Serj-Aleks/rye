
ROWS: { } , COLS: { }

read-boxes: fn1 {
	.matches regex "[" |^otherwise { false } ,
	.split-every 4 |map { -> 1 } |append! ROWS
}

prep-boxes: fn1 {
	= "" |^otherwise { false }
	transpose ROWS
	|map { .purge { .empty } }
	|set! 'COLS }
}

do-moves: fn1 { .load .do-in crane }

; the crane "dialect"
crane: context {
	
	move: { n a b } {
		
		cols: map\idx cols 'i { :col
			= a |^if { l: length? col , head col l - 1 }
			= b |^if { col +  }
		}
		A: a <- COLS , B: b <- COLS
		repeat n { pop! A |append! B }
	}
	
	from: to: fn1 { .return }
}

; strat the work

read\lines %stacks.txt
|for {
	.any\with {
		.read-boxes ,
		.prep-boxes ,
		.do-moves
	}
}

; TODO - any-with (2*)
; TODO - transpose (3*)
; TODO - otherwise (1*)
; TODO - make <- get references and pop! append! work on that references if possible (5*)