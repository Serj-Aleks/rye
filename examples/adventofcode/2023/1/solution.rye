
; # Aoc 2023 - Day one

; ## Part 1

re: regexp "(\d)"

read\lines %puzzle.txt
|map { .find-all* re |vals\with { .first , .last } |join .to-integer }
|sum |print


; ## Part 2
;
; I had a nice solution for the sample, but in main puzzle the overlaping number names
; showed to be a problem. I didn't want to use various manual or string replacement solutions like
; one => o1e, two => t2o , or replacing numbers while adding last character of a number name and
; Go, hence Rye's native Regex library doesn't have Positive look ahead. So puttint everything on the
; head (reversing) came to be a solution.

nums: { "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" }

fwd: regexp "(\d)|" + join\with nums "|"
rev: regexp "(\d)|" + reverse join\with nums "|"

convert: fn { x } { .position? nums |fix { x .to-integer } }

read\lines %puzzle.txt
|map { .vals\with { .match?* fwd |convert , .reverse .match?* rev |reverse |convert  } |join .to-integer }
|sum |print


