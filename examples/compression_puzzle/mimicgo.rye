
; Golang example we are mimicking
; https://github.com/otobrglez/compression-puzzle/blob/master/src/go/compress_mitja.go
; 
;func compress(in string) (out string) {
;  if len(in) == 0 {
;    return ""
;  }
;  ch := rune(in[0])
;  count := 0
;  for _, cur := range in {
;    if cur == ch {
;      count++
;      continue
;    }
;    out = out + fmt.Sprint(count) + string(ch)
;    ch = cur
;    count = 1
;  }
;  out = out + fmt.Sprint(count) + string(ch)
;  return
;}

; Direct translation from Go to Rye

compress: fn { in } {
	if in .length = 0 {
		return ""
	}
	chr: first in
	cnt: 0 , out: ""
	for in { :cur
		either cur = chr {
			cnt: cnt + 1
		} {
			out: out + cnt .str + chr
			chr: cur
			cnt: 1
		}
	}
	out: out + cnt .str + chr
}

; first pass

compress: fn { in } {
	ch: first in |^fix ""         ; we use a "returning function" fix, that returns empty string in case it's first arg is a failure
	cnt: 0 , out: ""
	for in {
		:cur = chr either {       ; we can set cur inline 
			inc! 'cnt             ; we use a "special" in-place modifying procedure, those are marked by word!
		} {
			append! 'out cnt .str + chr ; we use in-place word append!
			chr: cur , count: 1
		}
	}
	append! 'out cnt .str + chr
}

; 

compress: fn1 {
	|pass { .first |fix "" :chr , cnt: 0 , out: ""
		output: { out: out + cnt .str + chr } }
	|for { :cur = chr |either { inc! 'cnt }
		{ do output , cnt: 1 , chr: cur }                    
	} do output
}


compress: fn1 {
	|pass { .first |fix "" :chr , cnt: 0 , out: ""
		output: { append! out cnt .str + chr } }
	|for { = chr |either { inc! 'cnt }
		{ do output , cnt: 1 } , :chr                    
	} do output
}

compress: fn1 {
	|pass { .first |fix "" :chr , cnt: 0 , out: ""
		output: { append! 'out cnt .str + chr } }
	|for { = chr |either { inc! 'cnt }
		{ do output , cnt: 1 } , :chr
	} do output
}


; Brodul's Python solution
;
; def rec_group(input_, c, result):
;    if len(input_) == 1:
;        c += 1
;        result.append(str(c) + input_)
;        return result
;    char, rest = input_[0], input_[1:]
;    c += 1
;    if char != rest[0]:
;        result.append(str(c) + char)
;        return rec_group(rest, 0, result)
;    return rec_group(rest, c, result)

; Translation to Rye

rec-group1: fn { inp cnt res } {
	if inp .length = 1 {
		cnt: inc cnt
		res: res + c .str + inp
		return res
	}
	chr: first inp , rest: tail inp 
	cnt: inc cnt
	either not chr = first rest {
		result: result + c .str + char
		rec-group rest 0 result
	} {	rec-group rest c result }
}

; Some optimisations

compress-rec-1: fn { inp cnt res } {
	cnt: inc cnt                 ; cnt is incremeneted in all branches so we move it up here
	^if inp .length = 1 {        ; ^if is returning function, so on true it automatically returns to caller
		res + c .str + inp       ; result of the last expression is automatically returned 
	}
	chr: first inp , rest: tail inp 
	either not chr = first rest {
		compress-rec-1 rest 0 res + c .str + char ; we remove the temp variable and leave just expression
	} {	compress-rec-1 rest c res }
}

; Final code

compress-rec: fn { inp cnt res } { c: inc cnt 
  ^if inp .length = 1 { res + c .str + inp } 
  ^if inp .first = second inp { compress-rec tail inp c res } 
  compress-rec  tail inp  0  res + c .str + first inp 
}

compress: fn1 { .compress-rec 0 "" }

; Rye - same as above with left set word , code a little shorter but
; less visible

compress-rec: fn { inp cnt res } { c: inc cnt 
  inp .length = 1 |^if { res + c .str + inp } 
  inp .first :fi = second inp |^if { compress-rec tail inp c res } 
  compress-rec  tail inp  0  res + c .str + fi 
}

compress: fn1 { .compress-rec 0 "" }

