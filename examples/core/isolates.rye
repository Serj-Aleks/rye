
; Contexts (scopes?) in Rye are first class citizens.
; Let's see how we can use them.
; Otherwise a context is like a object or dictionary
; that can be linked to a parent context. All code is
; executed inside some context. And each function is it's
; own context, for example. But we can use and create
; contexts as any other Rye value and also have specific
; functions to work with them.



; Imagine we have a Arduino that is measuring temperature. It's connected to our computer via
; USB. Instead of inventing some protocol we want to expose it a context that it can operate in
; to comunicate with us.
;
; This gives our protocol composability of a programming language. More on that in later posts.
;
; Here we will do just the simplest possible example to show how we can even do this with contexts.

; Create our sensor context with one function update.
sensor: context { update: fn { x } { print x } }

; Our Arduino sent us this string. We load it and do it inside our sensor context:
"update 24 update 25" .load .print :input
do-in sensor input
; Great, this worked!
do-in sensor { print "This shouldn't work" }
; Uh! Sensor context is linked to our current context so all Rye functions are available to it!

; But we can use another function, that creates a context without a parent.
sensor-A: isolate { update: fn { x } { print x } }

; We want this to throw an error.
do-in sensor-A { print "we can do " .concat "anything!?" }

; This is what we wanted. print function is undefined here, BUT ...

do-in sensor-A { update 24 , update 25 }
; Our update function uses print, and it doesn't have it defined either!
; So we can efectively do nothing in our isolated context :P

; We can solve this. Since our update is just print we can bind it when context is created
sensor-B: isolate { update: ?print }
; Now we can run update, but no other Rye function will be defined in sensor
do-in sensor-B { update 24 , update 25 }
do-in sendor-B { print "Should error" }

; But what if our update is not just a builtin funtion. We now want to report multiple locations
sensor-C: context { update: fn { loc temp } { print loc + ": " + temp } }
; This will again not work. Print is undefined inside sensor

; But we can create a closure outside of sensor and bind it inside context when created.
; Closure's context will stay linked to it's original context so this works.
our-update: fnc { loc temp } current-ctx { print loc + ": " + temp }
sensor-D: context { update: ?our-update }
do-in sensor-D { update "Outside" 32 , update "Inside" 23 }
; Fnc is a function that defines a function with it's context linked to it's second argument.
; Current-ctx returns current context, we can use similar function to do this all inside a context.
sensor-d: context { update: fnc { loc temp } parent-ctx { print loc + ": " + temp } }
do-in sensor-d { update "Kitchen" 25 , update "Bedroom" 22 }
do-in sensor-d { print "Must error!" }

