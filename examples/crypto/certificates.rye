; Work in progress

; load pkcs12 file and turn in to block of pem-blocks

read\bytes %identity.p12 |pkcs12-to-pem "ppp"
; returns
; [Block: ^[Native of kind pem-block] [Native of kind pem-block] ]


; print the types and headers of pem blocks

read\bytes %identity.p12 |pkcs12-to-pem "ppp"
|for { .block-type? .print , .headers? .print }
; prints
; CERTIFICATE
; [
;  localKeyId: 2706efcc950c8205aa8852e12c9fa01563e61a13
; ]
; PRIVATE KEY
; [
;  localKeyId: 2706efcc950c8205aa8852e12c9fa01563e61a13
; ]

; get start and end date of the certificate

read\bytes %identity.p12 |pkcs12-to-pem "ppp" |seek { .block-type? = "CERTIFICATE" }
|x509-parse-certificate .vals\with { .not-after? , .not-before? }
; returns
; [Block: ^[Time: 2026-03-08 00:21:51] [Time: 2025-03-08 00:21:51] ]


; utility function
p12->certificate: fn { file pwd } {
	.read\bytes |pkcs12-to-pem pwd
	|seek { .block-type? = "CERTIFICATE" }
	|x509-parse-certificate
}

; print expiration date status of the certificate in p12 file 
client.p12 .p12->certificate "ppp" |not-after? |print > now |either { "VALID" } { "EXPIRED" }

; create a self-signed certificate and save it to pem file or to p12

generate-self-signed-certificate 2048 dict { CommonName: "Jimbo" }
; [Block: ^[Native of kind x509-certificate] [Native of kind rsa-private-key] ]
|set! { cert pkey }
; [Block: ^[Native of kind x509-certificate] [Native of kind rsa-private-key] ]

save-to-p12 cert pkey "pwd"
; [Native of kind Go-bytes]
|write\bytes "cert1.p12"
;[Integer: 1]


save-to-pem cert pkey
; [Block: ^[Native of kind Go-bytes] [Native of kind Go-bytes] ]
.with { .first .write\bytes "cert.pem" , .second .write\bytes "pkey.pem" }
;[Integer: 1]