
rye .needs { sqlite }

db: open sqlite://users.sql

user-id: 0

find-user: fn { pattern "finds and sets user by email, part of the email or name (string) or id (integer)" } {
	.search-users .set! 'user-id
}

search-users: fn { pattern "searches and displays user by email, part of the email or name (string) or id (integer)" } {
	.type? .switch {
 		'email   { { select * from user where email = ?pattern } }
   	 	'string  { { select * from user where email like ?pattern or name like ?pattern } }
 	 	'integer { { select * from user where id = ?pattern } }
	}
	|query* db
	|select-user
}

select-user: fn { users "sets user-id or let's user select a user and sets user-id" } {
	.^unless { 0 }
	|^when { .length? = 1 } { .display .A1 }
	|interact "Select one user"
	|^if { .first }
}

show-info: fn { "shows statistics of the current user" } {
	query db { select * from user where id = ?user-id }
}

show-stats: fn { "shows statistics of the current user" } {
	query db { select count() from project where id_user = ?user-id }
}

add-feature: fn { feat "add features to the current user" } {
	feat_: " " + feat + " "
	exec db { update user set features = replace features , ?feat_ , empty  ?feat  where id_user = ?user-id }
}

help: fn { "display help and example" } {
	print "You can use the commands to find specific users and manipulate them."
	print "Example:"
	print $x> find user "jim@gmail"$
	print $x> show-stats$
	print $x> add feature "API"$
}

enter-console "User management tool"


; TODO to make this work
; type? ... a function that returns a type as a word
; display that just displays the table
; current display is renamed to interact
; make --hr and --subc work together
; make functions display the names of arguments instead of just number of them
