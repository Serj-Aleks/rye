; example code

token: trim read %.api-token    ; OK

call-api: fn { path } { get\bearer https://refaktorlabs.com/API/ + path token }  ; DONE

(client): kind 'client { name: required address: required city: required }       ; DONE
(item): kind 'item { name: required qty: optional 1 decimal price: required decimal }  ; DONE

client-conv: { name: :name  address: calc { with-join { -> "street" , " " , -> "house_num" } } } ; TODO -- make convert function / dialect
item-conv: { title: :item_name  qty: :quantity  price:  calc { -> "price_single" -> "base" } vat: calc { -> "price_single" -> "taxes_applied" } }

; main code

items: copy { }

read-stdin .load-json .process {                             ; TODO -- make process function that works on dicts and lists
	shipping_address_id [ :id , call-api "shipping/" + id |convert client-conv >> (client) :client ]
	items { _ [ .convert item-conv >> (item) |append items ] }
}

crud: new-crud sqlite://mydb.db ; TODO -- make sqlite crud object 
crud/assure 'client client :client-id
crud/insert 'invoice_sent eval { 'dates_sent now 'date_to_pay now 'date_server now 'id_client client-id } :invoice-id
for items { + eval { 'id_invoice_sent invoice-id } |crud/insert* 'invoice_sent_b }


with new-crud sqlite://mydb.db { ; TODO -- make sqlite crud object 
	.assure 'client client :client-id ,
	.insert 'invoice_sent eval { 'dates_sent now 'date_to_pay now 'date_server now 'id_client client-id } :invoice-id ,
	:c for items { + eval { 'id_invoice_sent invoice-id } c .insert* 'invoice_sent_b }
}
