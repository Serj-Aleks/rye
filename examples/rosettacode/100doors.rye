
rye .needs { xhofs }

; 100 doors problem from rossetacode
; Rye so far doesn't have/want support for mutating blocks
; So this is a functional solution using map and recursion

produce 100 { } { + [ 0 ] } :doors

toggle: fn { doors step } {
	.map\pos 'i { :v either i .multiple-of step { not v } { v } } :ds
	^if step = 100 { ds }
	toggle ds step + 1
}

toggle doors 1 
|map\pos 'i { * i }
|filter { > 0 }
|probe

; returns open doors:
; [Block: [Integer: 1] [Integer: 4] [Integer: 9] [Integer: 16] [Integer: 25]
; [Integer: 36] [Integer: 49] [Integer: 64] [Integer: 81] [Integer: 100] ]




