; TODO:
; * add doc function that documents the current context / function 
; * let ls function display that documentation
; * add as-subcontext method that creates a subcontext and runs the file inside of that

rye |needs { sqlite }
    |as-subcontext

db: open sqlite://tasker.db
	
merge: fnd { old new "moves tasks to new contact and removes the old one" }
{
	exec db { update invoice_sent set id_partner = ?new where id_partner = ?old }
	exec db { delete from partner where id = ?old }
}

stats: fn { old new "gets the number of tasks for old and new contact"
}
{
	
	query db {
		select * from 
		( select count() old from invoice_sent where id_partner = ?old ) ,
		( select count() new from invoice_sent where id_partner = ?new )
	} |first
}

fix-doubles: does {

	doc "fixes double entries of contacts, moves tasks to new ones, deletes old"

	db .query {
		select min(id) old , max(id) new , vatid  ident , count() cnt
		from partner where vatid > "" group by vatid , name
		having cnt > 1
	}
	|print
	|for {
		-> 0 :old , -> 1 :new
		stats old new |prn , prn "=>"
		merge old new
		stats old new |print
	}	
}

enter-console "run: fix-doubles"
