; in 0.7 we are adding some simple pgsql functionality
; * get-page gets page from the db,
; * account sign-in checks for user in the db (no password hashing yet)
;
; Later:
; * add session handling
; * integrate bcrypt for pwd hashing
; * make URL-s support embedded variables for database password below
;
; Compile: Rye binary needs to be compiled with 'go build -tags "b_psql,b_sqlite"'

; the "web framework" so far are just these 5 functions

write-err: fn { err w } { write-header w code? err , write w to-json err }
write-ok: fn { d w } { write w to-json d }

webfn: fn { spec args body } {
	fnc args current-context {
		set-content-type w "application/json"
		full-form? r |validate spec
		|to-context |do-in body
	}
}
handle-web-resource: fn { w r res } {
	query? r "_m" |to-word :name
	res -> name :func
	func w r |^fix { .write-err w } |write-ok w
}

handle-web-resources: fn { w r resmap } {
	query? r "_r" |to-word :name
	resmap -> name |first :res
	handle-web-resource w r res
}

;  web-app / api code , two resources each with one method

account-resource: context {
 
	sign-in: webfn { email: required email  password: required } { w r } {
		query db { select password from user where email = ?email }
		|equal? password
		|require |^check { 403 "wrong credentials" }
		"ok"
	}

}

page-resource: context {
 
	get-page: webfn { id: required integer } { w r } {
		query db { select * from page where id = ?id }
		pass { .not-empty? |^check { 404 "page doesn't exist" } }
	}

}

handle-api: fn { w r } {
	handle-web-resources w r context {
		page: eval { page-resource "Hanldes pages" }
		account: eval { account-resource "Handles user accounts" }
	}
}

; the server

db: open postgres://webapp2:password@webapp2

http-server ":8080"
|handle "/api" ?handle-api
|serve
