; in 0.7 we are adding some simple pgsql functionality
; * get-page gets page from the db,
; * account sign-in checks for user in the db (no password hashing yet)
;
; Later:
; * add session handling
; * integrate bcrypt for pwd hashing
; * make URL-s support embedded variables for database password below
;
; Compile: Rye binary needs to be compiled with 'go build -tags "b_psql,b_sqlite"'

; the "web framework" so far are just these 5 functions

write-err: fn { err w } { write-header w code? err , write w to-json err }
write-ok: fn { d w } { write w to-json d }

webfn: fn { spec args body } {
	fnc args current-context {
		set-content-type w "application/json"
		full-form? r |validate spec
		|to-context |do-in body
	}
}

handle-web-resource: fn { w r res } {
	query? r "_m" |to-word :name
	res -> name :func |print
	func w r |^fix { .write-err w } |write-ok w
}

handle-web-resources: fn { w r resmap } {
	query? r "_r" |to-word :name
	resmap -> name |first :res
	handle-web-resource w r res
}

;  The user accounts resource

account-resource: context {

	produce-token: fn { id } {
		generate-token 32 :tok
		exec db
		{	insert into tokens ( id_user , token ) values ( ?id , ?tok )
			on conflict ( id_user ) do update set token = ?tok }
		tok
	}

	try-login: fn { email password } {
		query db { select id , password from users where email = ?email }
		|^check 0
		|pass { .B1 .bcrypt-check password |^require 0 }
		|A1
	}
	
	get-token: webfn { email: required email  password: required } { w r } {
		try-login email password
		|^check { 401 "wrong credentials" }
		|produce-token
	}

	login: webfn { email: required email  password: required } { w r } {
		try-login email password
		|^check { 401 "wrong credentials" } :uid
		get store r sess
		|set "logined" 1
		|set "uid" uid
		|save r w
	}

	logout: webfn { } { w r } {
		get store r sess
		|set "logined" 0
		|set "uid" 0
		|save r w
	}

	get-uid: webfn { } { w r } {
		get store r sess
		|get "uid"
		|fix { 0 }
	}
}
