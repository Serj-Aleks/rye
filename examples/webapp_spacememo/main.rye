; APP - XMVP ... no collections, no creating interface, no spaced repetition yet , just words and samples in a database,
; static link to that collection and frontend

; two tables:
;  * collection with id, hash, name
;  * word with id, id_collection, key, word
;  * sample with id, text, full text index

words-resource: context {
 
	no-auth: { 401 "Unauthenticated" }
	forbidden: { 403 "Forbidden" }
	get-uid: fn { r } { get store r sess |get "uid" |^check 0 |^require 0 }

	get-all-by: webfn { hash: required } { w r } {
		query db { select w.* from word w join collection c on c.id = w.id_collection where c.hash = ?hash }
		|^check { 500 }
	}
	
}

handle-api: fn { w r } {
	handle-web-resources w r context {
		words: eval { words-resource "Handles words database" }
;		collection: eval { collection-resource "Collections of words" }
		account: eval { account-resource "Handles user accounts" }
	}
}

; the main part

db: open postgres://wordspace:password@/webapp_wordspace

store: new-cookie-store "todo-temporary-secret-1" ; read it from env or argument in real app

sess: "main-session"

; the server

new-server ":8080"
|handle "/api" ?handle-api
|serve


; TEST LINKS:
;
; http://localhost:8080/api?_r=account&_m=get-token&email=jim@example.com&password=secret
; http://localhost:8080/api?_r=account&_m=login&email=jim@example.com&password=secret
; http://localhost:8080/api?_r=account&_m=get-uid
; http://localhost:8080/api?_r=account&_m=logout
;
; http://localhost:8080/api?_r=page&_m=get-one&id=2
; http://localhost:8080/api?_r=page&_m=set-one&id=10&title=test&content=bla%20bla
; http://localhost:8080/api?_r=page&_m=add-one&title=test%201&content=bla%20bla%20bla
; http://localhost:8080/api?_r=page&_m=delete-one&id=2
; 


