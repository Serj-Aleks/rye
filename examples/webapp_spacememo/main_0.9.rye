; in 0.7 we are adding some simple pgsql functionality
; * get-page gets page from the db,
; * account sign-in checks for user in the db (no password hashing yet)
;
; Later:
; * add session handling
; * integrate bcrypt for pwd hashing
; * make URL-s support embedded variables for database password below
;
; Compile: Rye binary needs to be compiled with 'go build -tags "b_psql,b_sqlite"'

; the "web framework" so far are just these 5 functions

write-err: fn { err w } { write-header w code? err , write w to-json err }
write-ok: fn { d w } { write w to-json d }

webfn: fn { spec args body } {
	fnc args current-context {
		set-content-type w "application/json"
		full-form? r |validate spec
		|to-context |do-in body
	}
}

handle-web-resource: fn { w r res } {
	query? r "_m" |to-word :name
	res -> name :func |print
	func w r |^fix { .write-err w } |write-ok w
}

handle-web-resources: fn { w r resmap } {
	query? r "_r" |to-word :name
	resmap -> name |first :res
	handle-web-resource w r res
}

;  web-app / api code , two resources each with one method

account-resource: context {

	produce-token: fn { id } {
		generate-token 32 :tok
		exec db
		{	insert into tokens ( id_user , token ) values ( ?id , ?tok )
			on conflict ( id_user ) do update set token = ?tok }
		tok
	}

	try-login: fn { email password } {
		query db { select id , password from users where email = ?email }
		|^check 0
		|pass { .B1 .bcrypt-check password |^require 0 }
		|A1
	}
	
	get-token: webfn { email: required email  password: required } { w r } {
		try-login email password
		|^check { 401 "wrong credentials" }
		|produce-token
	}

	login: webfn { email: required email  password: required } { w r } {
		try-login email password
		|^check { 401 "wrong credentials" } :uid
		get store r sess
		|set "logined" 1
		|set "uid" uid
		|save r w
	}

	logout: webfn { } { w r } {
		get store r sess
		|set "logined" 0
		|set "uid" 0
		|save r w
	}

	get-uid: webfn { } { w r } {
		get store r sess
		|get "uid"
		|fix { 0 }
	}
}

page-resource: context {
 
	no-auth: { 401 "Unauthenticated" }
	forbidden: { 403 "Forbidden" }
	get-uid: fn { r } { get store r sess |get "uid" |^check 0 |^require 0 }

	get-one: webfn { id: required integer } { w r } {
		query db { select * from pages where id = ?id }
		|^check { 404 "page doesn't exist" }
	}

	set-one: webfn { id: required integer  title: required  content: required } { w r } {
		get-uid r |^check no-auth :uid
		exec db { update pages set title = ?title , content = ?content where id = ?id and id_user = ?uid }
		|^check forbidden
	}

	add-one: webfn { title: required  content: required } { w r } {
		get-uid r |^check no-auth :uid
		exec db { insert into pages ( title , content , id_user ) values ( ?title , ?content , ?uid ) }
		|^check forbidden
	}

	delete-one: webfn { id: required integer } { w r } {
		get-uid r |^check no-auth :uid
		exec db { delete from pages where id = ?id and id_user = ?uid }
		|^check forbidden
	}
	
}

handle-api: fn { w r } {
	handle-web-resources w r context {
		page: eval { page-resource "Hanldes pages" }
		account: eval { account-resource "Handles user accounts" }
	}
}

; the main part

db: open postgres://webapp2:password@/webapp2

store: new-cookie-store "todo-temporary-secret" ; read it from env or argument in real app

sess: "main-session"

; the server

new-server ":8080"
|handle "/api" ?handle-api
|serve


; TEST LINKS:
;
; http://localhost:8080/api?_r=account&_m=get-token&email=jim@example.com&password=secret
; http://localhost:8080/api?_r=account&_m=login&email=jim@example.com&password=secret
; http://localhost:8080/api?_r=account&_m=get-uid
; http://localhost:8080/api?_r=account&_m=logout
;
; http://localhost:8080/api?_r=page&_m=get-one&id=2
; http://localhost:8080/api?_r=page&_m=set-one&id=10&title=test&content=bla%20bla
; http://localhost:8080/api?_r=page&_m=add-one&title=test%201&content=bla%20bla%20bla
; http://localhost:8080/api?_r=page&_m=delete-one&id=2
; 


