section "Regexp " "Go like Regular expressions" {
	group "regexp" 
	""
	{
		arg "* pattern: regular expression"
	}

	{
		equal { regexp "[0-9]" |type? } 'native
	}

	group "regexp//is-match" 
	""
	{
		arg "* regexp - native regexp value"
		arg "* input - value to test for matching"
	}

	{
		equal { regexp "[0-9]" |is-match "5" } 1
		equal { regexp "[0-9]" |is-match "a" } 0
	}

	group "regexp//submatch?" 
	""
	{
	}

	{
		equal { regexp "x([0-9]+)y" |submatch? "x123y" } "123"
	}

	group "regexp//submatches?" 
	""
	{
	}

	{
		equal { regexp "x([0-9]+)y" |submatches? "x123y x234y" } { "123" }
	}

	group "regexp//submatches\all?" 
	""
	{
	}

	{
		equal { regexp "x([0-9]+)(y+)?" |submatches\all? "x11yy x22" } { { "11" "yy" } { "22" "" } }
	}

	group "regexp//find-all" 
	""
	{
	}

	{
		equal { regexp "[0-9]+" |find-all "x123y x234y" } { "123" "234" }
	}

	group "regexp//match?" 
	""
	{
		arg "* regexp value"
		arg "* input"
	}

	{
		equal { regexp "[0-9]+c+" |match? "aa33bb55cc" } "55cc"
	}

	group "regexp//replace-all" 
	""
	{
	}

	{
		equal { regexp "[0-9]+" |replace-all "x123y x234y" "XXX" } "xXXXy xXXXy"
	}

}

section "Validation " "validation dialect for Rye values" {
	group "validate" 
	""
	{
	}

	{
		equal { validate dict { a: 1 } { a: required } } dict { a: 1 }
		equal { validate dict { a: 1 } { b: optional 2 } } dict { b: 2 }
		equal { validate dict { a: 1 } { a: optional 0 b: optional 2 } } dict { a: 1 b: 2 }
		equal { validate dict { a: 1 } { a: required integer } } dict { a: 1 }
		equal { validate dict { a: "1" } { a: required integer } } dict { a: 1 }
		equal { validate dict { a: "1" } { a: required integer } -> "a" |type? } 'integer
		equal { validate dict { a: 3.14 } { a: required decimal } } dict { a: 3.14 }
		equal { validate dict { a: 3 } { a: required decimal } } dict { a: 3.0 }
		equal { validate dict { a: "3.14" } { a: required decimal } } dict { a: 3.14 }
		equal { validate dict { a: "3.14" } { a: required decimal } -> "a" |type? } 'decimal
		equal { validate dict { a: "jim" } { a: required string } } dict { a: "jim" }
		equal { validate dict { a: "e@ma.il" } { a: required email } } dict { a: "e@ma.il" }
		equal { validate dict { a: "e@ma.il" } { a: required email } -> "a" |type? } 'string
		equal { validate dict { a: "30.12.2024" } { a: required date } } dict [ "a" date "2024-12-30" ]
		equal { validate dict { a: "2024-12-30" } { a: required date } } dict [ "a" date "2024-12-30" ]
		equal { validate dict { a: "2024-12-30" } { a: required date } -> "a" |type? } 'date
		equal { validate dict { a: 5 } { a: required integer check { < 10 } } } dict [ "a" 5 ]
		equal { validate dict { a: 5 } { a: required integer calc { + 10 } } } dict [ "a" 15 ]
		equal { validate dict { a: 5 } { b: required } |disarm |type? } 'error
		equal { validate dict { b: "5c" } { b: optional 0 integer } |disarm |type? } 'error
		equal { validate dict { b: "2x0" } { b: required decimal } |disarm |status? } 403   ;  ("The server understood the request, but is refusing to fulfill it"). Contrary to popular opinion, RFC2616 doesn't say "403 is only intended for failed authentication", but "403: I know what you want, but I won't do that". That condition may or may not be due to authentication.
		equal { validate dict { b: "not-mail" } { b: required email } |disarm |message? } "validation error"
		equal { validate dict { b: "2023-1-1" } { b: required date } |disarm |details? } dict { b: "not date" }
	}

	group "validate>ctx" 
	""
	{
	}

	{
		equal { validate>ctx dict { a: 1 } { a: required } |type? } 'ctx    ; TODO rename to context
		equal { validate>ctx dict { a: 1 } { a: optional 0 } -> 'a } 1
	}

}

section "JSON " "parsing and generating JSON" {
	group "parse-json" 
	""
	{
	}

	{
		equal { "[ 1, 2, 3 ]" |parse-json |length? } 3
		equal { "[ 1, 2, 3 ]" |parse-json |type? } 'list
	}

	group "to-json" 
	""
	{
	}

	{
		equal { list { 1 2 3 } |to-json } "[1, 2, 3] "
		equal { dict { a: 1 b: 2 c: 3 } |to-json } `{"a": 1, "b": 2, "c": 3} `
	}

	group "to-json\lines" 
	""
	{
	}

	{
		equal { table { "a" "b" } { 2 "x" 3 "y" } |to-json\lines } `{"a": 2, "b": "x"} \n{"a": 3, "b": "y"} \n`
	}

}

section "SXML " "streaming, Sax like XML dialect (still in design)" {
	group "rye-reader//do-sxml" 
	""
	{
	}

	{
		stdout {
		"<scene><bot>C3PO</bot><bot>R2D2</bot><jedi>Luke</jedi></scene>" |reader
		.do-sxml { _ [ .prns ] }
		} "C3PO R2D2 Luke "
		stdout {
		"<scene><bot>C3PO</bot><bot>R2D2</bot><jedi>Luke</jedi></scene>" |reader
		.do-sxml { <bot> { _ [ .prns ] } }
		} "C3PO R2D2 "
		stdout {
		"<scene><ship>XWing</ship><bot>R2D2</bot><jedi>Luke</jedi></scene>" |reader
		.do-sxml { <bot> <jedi> { _ [ .prns ] } }
		} "R2D2 Luke "
		stdout {
		"<scene><xwing><bot>R2D2</bot><person>Luke</person></xwing><destroyer><person>Vader</person></destroyer></scene>" |reader
		.do-sxml { <xwing> { <person> { _ [ .prns ] } } }
		} "Luke "
	}

	group "rye-sxml-start//attr?" 
	""
	{
	}

	{
		stdout {
		`<scene><ship type="xwing"><person age="25">Luke</person></ship><ship type="destroyer"><person age="55">Vader</person></ship></scene>` |reader
		.do-sxml { <ship> [ .attr? 0 |prns	 ] }
		} "xwing destroyer "
		stdout {
		`<scene><ship type="xwing"><person age="25">Luke</person></ship><ship type="destroyer"><person age="55">Vader</person></ship></scene>` |reader
		.do-sxml { <person> [ .attr? 0 |prns	 ] }
		} "25 55 "
	}

}

section "HTML " "streaming, Sax like HTML dialect (still in design)" {
	group "unescape\html" 
	""
	{
	}

	{
		equal { unescape\html "&gt;hello&lt;" } ">hello<"
	}

	group "escape\html" 
	""
	{
	}

	{
		equal { escape\html "<hello>" } "&lt;hello&gt;"
	}

	group "html->markdown" 
	""
	{
	}

	{
		equal { html->markdown "<h1>title</h1><p>para</p>" } "# title\n\npara"
	}

	group "rye-reader//parse-html" 
	""
	{
	}

	{
		stdout { "<html><body><div class='menu'><a href='/'>home</a><a href='/about/'>about</a>" |reader
		.parse-html { <a> [ .attr? 'href |prns ] }
		} "/ /about/ "
		;
	}

}

