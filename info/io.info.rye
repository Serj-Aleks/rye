section "Default" "" {
	group "input" 
	"Prompts for and reads user input from the console."
	{
		arg `prompt: string to display as a prompt`
		returns `string containing the user's input`
	}

	{
	}

}

section "IO " "IO related functions" {
	group "file-schema//open" 
	"Opens a file for reading."
	{
		arg `path: uri representing the file to open`
		returns `native file object`
	}

	{
		equal { open %data/file.txt |type? } 'native
		equal { open %data/file.txt |kind? } 'file
	}

	group "file-schema//open\append" 
	"Opens a file for appending."
	{
		arg `path: uri representing the file to open for appending`
		returns `native writer object`
	}

	{
		equal { open\append %data/file.txt |type? } 'native
		equal { open\append %data/file.txt |kind? } 'writer
	}

	group "file-schema//create" 
	"Creates a new file."
	{
		arg `path: uri representing the file to create`
		returns `native file object`
	}

	{
		equal { create %data/created.txt |type? } 'native
		equal { create %data/created.txt |kind? } 'file
	}

	group "file-ext?" 
	"Gets the extension of a file."
	{
		arg `path: uri or string representing a file path`
		returns `string containing the file extension (including the dot)`
	}

	{
		equal { file-ext? %data/file.txt } ".txt"
		equal { file-ext? %data/file.temp.png } ".png"
		equal { file-ext? "data/file.temp.png" } ".png"
	}

	group "reader" 
	"Creates a new reader from a file path, file object, or string."
	{
		arg `source: uri, file object, or string to read from`
		returns `native reader object`
	}

	{
		equal { reader %data/file.txt |kind? } 'reader
		equal { reader open %data/file.txt |kind? } 'reader
		equal { reader "some string" |kind? } 'reader
	}

	group "stdin" 
	"Gets a reader for standard input."
	{
		arg `none`
		returns `native reader object connected to standard input`
	}

	{
	}

	group "stdout" 
	"Gets a writer for standard output."
	{
		arg `none`
		returns `native writer object connected to standard output`
	}

	{
	}

	group "reader//read\string" 
	"Reads all content from a reader as a string."
	{
		arg `reader: native reader object`
		returns `string containing all content from the reader`
	}

	{
		equal { reader "some string" |read\string } "some string"
	}

	group "reader//copy" 
	"Copies all content from a reader to a writer."
	{
		arg `reader: native reader object`
		arg `writer: native writer object`
		returns `the reader object if successful`
	}

	{
	}

	group "file//copy" 
	"Copies content from a file to a writer."
	{
		arg `file: native file object`
		arg `writer: native writer object`
		returns `the file object if successful`
	}

	{
	}

	group "file//stat" 
	"Gets file information (stat) for a file."
	{
		arg `file: native file object`
		returns `native file-info object`
	}

	{
		equal { stat open %data/file.txt |kind? } 'file-info
	}

	group "file-info//size?" 
	"Gets the size of a file in bytes."
	{
		arg `file-info: native file-info object`
		returns `integer representing the file size in bytes`
	}

	{
		equal { size? stat open %data/file.txt } 16
	}

	group "file//read-all" 
	"Reads the entire content of a file as a string."
	{
		arg `file: native file object`
		returns `string containing the entire file content`
	}

	{
		equal { read-all open %data/file.txt } "hello text file\n"
	}

	group "file//seek\end" 
	"Seeks to the end of a file."
	{
		arg `file: native file object`
		returns `the same file object with position set to end of file`
	}

	{
	}

	group "file//close" 
	"Closes an open file."
	{
		arg `file: native file object`
		returns `empty string if successful`
	}

	{
		equal { close open %data/file.txt } ""
	}

	group "file-schema//read" 
	"Reads the entire content of a file as a string."
	{
		arg `path: uri representing the file to read`
		returns `string containing the entire file content`
	}

	{
		equal { read %data/file.txt } "hello text file\n"
	}

	group "file-schema//read\bytes" 
	"Reads the entire content of a file as bytes."
	{
		arg `path: uri representing the file to read`
		returns `native bytes object containing the file content`
	}

	{
		equal { read %data/file.txt } "hello text file\n"
	}

	group "file-schema//read\lines" 
	"Reads a file and returns its content as a block of lines."
	{
		arg `path: uri representing the file to read`
		returns `block of strings, each representing a line from the file`
	}

	{
		equal { read %data/file.txt } "hello text file\n"
	}

	group "file-schema//write" 
	"Writes content to a file."
	{
		arg `path: uri representing the file to write to`
		arg `content: string or bytes to write to the file`
		returns `the content that was written`
	}

	{
		equal { write %data/write.txt "written\n" } "written\n"
	}

	group "write\bytes" 
	"Writes bytes to a file."
	{
		arg `bytes: Go-bytes native value to write`
		arg `path: string path to the file to write`
		returns `integer 1 if successful`
	}

	{
	}

	group "append\bytes" 
	"Appends two byte arrays into one."
	{
		arg `bytes1: first Go-bytes native value`
		arg `bytes2: second Go-bytes native value`
		returns `combined bytes as a native bytes object`
	}

	{
	}

	group "writer//write\string" 
	"Writes a string to a writer."
	{
		arg `writer: native writer object`
		arg `content: string to write`
		returns `the writer object if successful`
	}

	{
	}

	group "https-schema//open" 
	"Opens a HTTPS GET request and returns a reader for the response body."
	{
		arg `url: uri representing the HTTPS URL to request`
		returns `native reader object for the response body`
	}

	{
	}

	group "https-schema//get" 
	"Makes a HTTPS GET request and returns the response body as a string."
	{
		arg `url: uri representing the HTTPS URL to request`
		returns `string containing the response body`
	}

	{
	}

	group "https-schema//post" 
	"Makes a HTTPS POST request and returns the response body as a string."
	{
		arg `url: uri representing the HTTPS URL to request`
		arg `data: string containing the request body`
		arg `content-type: word specifying the content type (e.g., 'json', 'text')`
		returns `string containing the response body`
	}

	{
	}

	group "http-schema//get" 
	"Makes a HTTP GET request and returns the response body as a string."
	{
		arg `url: uri representing the HTTP URL to request`
		returns `string containing the response body`
	}

	{
	}

	group "http-schema//post" 
	"Makes a HTTP POST request and returns the response body as a string."
	{
		arg `url: uri representing the HTTP URL to request`
		arg `data: string containing the request body`
		arg `content-type: word specifying the content type (e.g., 'json', 'text')`
		returns `string containing the response body`
	}

	{
	}

	group "https-schema//new-request" 
	"Creates a new HTTPS request object."
	{
		arg `url: uri representing the HTTPS URL to request`
		arg `method: word specifying the HTTP method (e.g., 'GET', 'POST')`
		arg `data: string containing the request body`
		returns `native https-request object`
	}

	{
	}

	group "https-request//set-header" 
	"Sets a header on a HTTPS request."
	{
		arg `request: native https-request object`
		arg `name: word representing the header name`
		arg `value: string containing the header value`
		returns `the request object if successful`
	}

	{
	}

	group "https-request//set-basic-auth" 
	"Sets Basic Authentication on a HTTPS request."
	{
		arg `request: native https-request object`
		arg `username: string containing the username`
		arg `password: string containing the password`
		returns `the request object if successful`
	}

	{
	}

	group "https-request//call" 
	"Executes a HTTPS request and returns the response."
	{
		arg `request: native https-request object`
		returns `native https-response object`
	}

	{
	}

	group "https-response//read-body" 
	"Reads the body of a HTTPS response as a string."
	{
		arg `response: native https-response object`
		returns `string containing the response body`
	}

	{
	}

	group "email//send" 
	"Sends an email to the specified address."
	{
		arg `to: email address to send to`
		arg `message: string containing the email message`
		returns `integer 1 if successful`
	}

	{
	}

	group "ftp-schema//open" 
	"Opens a connection to an FTP server."
	{
		arg `server: uri representing the FTP server to connect to`
		returns `native ftp-connection object`
	}

	{
	}

	group "ftp-connection//login" 
	"Logs in to an FTP server connection."
	{
		arg `connection: native ftp-connection object`
		arg `username: string containing the username`
		arg `password: string containing the password`
		returns `the connection object if successful`
	}

	{
	}

	group "ftp-connection//retrieve" 
	"Retrieves a file from an FTP server."
	{
		arg `connection: native ftp-connection object`
		arg `path: string containing the path of the file to retrieve`
		returns `native reader object for the retrieved file`
	}

	{
	}

	group "tail-file" 
	"Tails a file, following it for new content. Used for monitoring log files."
	{
		arg `path: uri or string representing the file to tail`
		arg `follow: boolean indicating whether to follow the file for new content`
		arg `reopen: boolean indicating whether to reopen the file if it's rotated`
		returns `native tail-file object that can be used to read lines as they are added`
	}

	{
	}

	group "tail-file//read-line" 
	"Reads the next line from a tailed file. Blocks until a line is available."
	{
		arg `tail: native tail-file object`
		returns `string containing the next line from the file, or nil if no more lines`
	}

	{
	}

	group "tail-file//close" 
	"Closes a tailed file, stopping the monitoring."
	{
		arg `tail: native tail-file object`
		returns `empty string if successful`
	}

	{
	}

}

