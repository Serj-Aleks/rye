; Testing and Documenting frameworks that do test and generate html reference docs

rye .args\raw :arg
root-ctx: current-ctx

test-framework: context {
	
	section: fn { name descr code } { print join { "SECTION: " name newline " * " descr } , do code }
	
	group: fn { name descr args code } { print " GROUP: " + name , do code }
	
	equal: fn { test res } {
		do-in root-ctx test :got = res
		|either { print "  - OK" } { print join { "  - Error: expected " mold res ", got " mold got } }
	}
	
	stdout: fn { test res } {
		capture-stdout { do-in root-ctx test } :got = res
		|either { print "  - OK" } { print join { "  - Error: expected " mold res ", got " mold got } }
	}

	comment: fn { str } {
		
	}

}

docs-framework: context {
	
	section: fn { name descr code } { print join { "<h2>" name "</h2><p>" descr "</p><div class='section'>" } , do code , print "</div>" }
	
	group: fn { name descr args code }   { print join { "<h3>" name "</h3><p>" descr "</p><div class='group'>" } , do code , print "</div>" }

	equal: fn { test res } {
		do-in root-ctx test :got = res
		|if { print join [ "<pre class='prettyprint lang-rye'><code language='lang-rye'>" mold\nowrap test newline "; returns "  mold\nowrap got "</code></pre>" ] }
	}

	stdout: fn { test res } {
		capture-stdout { do-in root-ctx test } :got = res
		|if { print join [ "<pre class='prettyprint lang-rye'><code language='lang-rye'>" mold\nowrap test newline "; prints "  mold\nowrap got "</code></pre>" ] }
	}

	comment: fn { str } {
		print join [ "<p class='comment'>" str "</p>" ]
	}

	
}

switch arg {
	"test" { do-in test-framework load %builtins.rye }
	"doc"  {
		print read %tpl/header.html
		do-in docs-framework load %builtins.rye
		print read %tpl/footer.html
	}
	_ { print "use test or doc command" }
} 













;   maybe we need this at some point 
;	true: fn { test } {
;		do-in root-ctx test
;		|either { print "  - OK" } { print "  - Error: not True" }
;	}
